name: area
services:
  client_mobile:
    container_name: client_mobile
    volumes:
      - shared_apk:/app/public/apk
    networks:
      - app-networks
    restart: no
    pull_policy: always

  client_mobile-documentation:
    container_name: client_mobile-documentation
    ports:
      - '0.0.0.0:6062:6062'
    networks:
      - app-networks
    restart: always
    labels:
      - "traefik.enable=true"
    pull_policy: always

  client_web:
    container_name: client_web
    depends_on:
      client_mobile:
        condition: service_started
      server:
        condition: service_healthy
    volumes:
      - shared_apk:/app/public/apk
    environment:
      - PORT=${FRONTEND_PORT:-8081}
    ports:
      - '0.0.0.0:${FRONTEND_PORT:-8081}:${FRONTEND_PORT:-8081}'
    networks:
      - app-networks
    restart: always
    labels:
      - "traefik.enable=true"
    pull_policy: always

  client_web-documentation:
    container_name: client_web-documentation
    ports:
      - '0.0.0.0:6061:6061'
    networks:
      - app-networks
    restart: always
    labels:
      - "traefik.enable=true"
    pull_policy: always

  database:
    image: postgres:17-alpine
    container_name: database
    volumes:
      - database-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-area-database}
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      DB_HOST: ${DB_HOST:-database}
    networks:
      - app-networks
    restart: always
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-admin} -d
            ${POSTGRES_DB:-area-database}"
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    pull_policy: always

  reverse-proxy:
    image: traefik:v3.3
    container_name: reverse-proxy
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # So that Traefik can store the certificates
    ports:
      # The HTTP port
      - '0.0.0.0:80:80'

      # The HTTPS port
      - '0.0.0.0:443:443'
      # The Web UI (enabled by --api.insecure=true)
      - '0.0.0.0:8090:8080'
    networks:
      - app-networks
    # Enables the web UI and tells Traefik to listen to docker
    command:
      - "--api.insecure=true"
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    restart: always

  server:
    container_name: server
    depends_on:
      database:
        condition: service_healthy
    environment:
      - GIN_MODE=release
    env_file:
      - .env
    ports:
      - '0.0.0.0:${BACKEND_PORT:-8080}:${BACKEND_PORT:-8080}'
    networks:
      - app-networks
    restart: always
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider
            http://localhost:${BACKEND_PORT:-8080}/about.json || exit 1"
        ]
      interval: 5s
      timeout: 5s
      retries: 20
    pull_policy: always

  server-documentation:
    container_name: server-documentation
    ports:
      - '0.0.0.0:6060:6060'
    networks:
      - app-networks
    restart: always
    labels:
      - "traefik.enable=true"
    pull_policy: always

networks:
  app-networks:


volumes:
  database-data:
  shared_apk:
