definitions:
  schemas.Action:
    properties:
      createdAt:
        type: string
      description:
        description: The description of the action
        type: string
      id:
        description: The unique identifier for the action
        type: integer
      minimum_refresh_rate:
        type: integer
      name:
        description: The name of the action
        type: string
      option:
        description: The option of the action
        items:
          type: integer
        type: array
      service:
        allOf:
        - $ref: '#/definitions/schemas.Service'
        description: The service that the action belongs to
      update_at:
        type: string
    required:
    - description
    - minimum_refresh_rate
    - name
    - option
    - service
    type: object
  schemas.Area:
    properties:
      action:
        $ref: '#/definitions/schemas.Action'
      action_option:
        items:
          type: integer
        type: array
      action_refresh_rate:
        type: integer
      createdAt:
        type: string
      description:
        type: string
      enable:
        type: boolean
      id:
        type: integer
      reaction:
        $ref: '#/definitions/schemas.Reaction'
      reaction_option:
        items:
          type: integer
        type: array
      storage_variable:
        items:
          type: integer
        type: array
      title:
        type: string
      update_at:
        type: string
      user:
        $ref: '#/definitions/schemas.User'
    required:
    - action
    - action_option
    - action_refresh_rate
    - description
    - reaction
    - reaction_option
    - title
    - user
    type: object
  schemas.AreaMessage:
    properties:
      action_id:
        description: Foreign key for Action
        type: integer
      action_option:
        items:
          type: integer
        type: array
      action_refresh_rate:
        type: integer
      description:
        type: string
      reaction_id:
        description: Foreign key for Reaction
        type: integer
      reaction_option:
        items:
          type: integer
        type: array
      title:
        type: string
    required:
    - action_option
    - action_refresh_rate
    - description
    - reaction_option
    - title
    type: object
  schemas.AuthenticationURL:
    properties:
      authentication_url:
        type: string
    type: object
  schemas.CodeCredentials:
    properties:
      code:
        type: string
    required:
    - code
    type: object
  schemas.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  schemas.JWT:
    properties:
      token:
        type: string
    type: object
  schemas.Reaction:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      option:
        items:
          type: integer
        type: array
      service:
        $ref: '#/definitions/schemas.Service'
      update_at:
        type: string
    required:
    - description
    - name
    - option
    - service
    type: object
  schemas.Response:
    properties:
      message:
        type: string
    type: object
  schemas.Service:
    properties:
      color:
        type: string
      created_at:
        type: string
      description:
        type: string
      icon:
        type: string
      id:
        type: integer
      name:
        $ref: '#/definitions/schemas.ServiceName'
      oauth:
        type: boolean
      update_at:
        type: string
    required:
    - color
    - description
    - icon
    - name
    - oauth
    type: object
  schemas.ServiceName:
    enum:
    - Spotify
    - OpenWeatherMap
    - Timer
    - Google
    - Github
    - Dropbox
    - Microsoft
    type: string
    x-enum-varnames:
    - Spotify
    - Openweathermap
    - Timer
    - Google
    - Github
    - Dropbox
    - Microsoft
  schemas.Token:
    properties:
      created_at:
        description: Time when the token was created
        type: string
      expire_at:
        description: Time when the token expires
        type: string
      id:
        description: Unique identifier for the token
        type: integer
      refresh_token:
        description: Refresh token
        type: string
      service:
        allOf:
        - $ref: '#/definitions/schemas.Service'
        description: Service that the token belongs to
      token:
        description: Token
        type: string
      update_at:
        description: Time when the token was last updated
        type: string
      user:
        allOf:
        - $ref: '#/definitions/schemas.User'
        description: User that the token belongs to
    type: object
  schemas.User:
    properties:
      created_at:
        description: Time when the user was created
        type: string
      email:
        description: Email of the user
        type: string
      id:
        description: Unique identifier for the user
        type: integer
      password:
        description: can be null for Oauth2.0 users
        type: string
      token_id:
        description: Foreign key for LinkURL
        type: integer
      updated_at:
        description: Time when the user was last updated
        type: string
      username:
        description: Username of the user
        type: string
    required:
    - email
    - username
    type: object
  schemas.UserAllInfo:
    properties:
      tokens:
        description: List of tokens
        items:
          $ref: '#/definitions/schemas.Token'
        type: array
      user:
        allOf:
        - $ref: '#/definitions/schemas.User'
        description: User
    type: object
  schemas.UserCredentials:
    properties:
      email:
        description: Email of the user
        type: string
      username:
        description: Username of the user
        type: string
    type: object
info:
  contact: {}
paths:
  /action/info/:id:
    get:
      consumes:
      - application/json
      description: get action info of service id
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.Action'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - bearerAuth: []
      summary: get action info
      tags:
      - Action
  /area:
    delete:
      consumes:
      - application/json
      description: delete user area list
      parameters:
      - description: Area ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Area'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - bearerAuth: []
      summary: delete user area
      tags:
      - Area
    get:
      consumes:
      - application/json
      description: get user areas list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.Area'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - bearerAuth: []
      summary: get user areas
      tags:
      - Area
    post:
      consumes:
      - application/json
      description: create area
      parameters:
      - description: Area Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/schemas.AreaMessage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - bearerAuth: []
      summary: create area
      tags:
      - Area
    put:
      consumes:
      - application/json
      description: update user area list
      parameters:
      - collectionFormat: csv
        in: path
        items:
          type: integer
        name: action_option
        required: true
        type: array
      - in: path
        name: action_refresh_rate
        required: true
        type: integer
      - in: path
        name: createdAt
        type: string
      - in: path
        name: description
        required: true
        type: string
      - in: path
        name: enable
        type: boolean
      - in: path
        name: id
        type: integer
      - collectionFormat: csv
        in: path
        items:
          type: integer
        name: reaction_option
        required: true
        type: array
      - collectionFormat: csv
        in: path
        items:
          type: integer
        name: storage_variable
        type: array
      - in: path
        name: title
        required: true
        type: string
      - in: path
        name: update_at
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Area'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - bearerAuth: []
      summary: update user area
      tags:
      - Area
  /area-result/:id:
    get:
      consumes:
      - application/json
      description: get user areas results list by area id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.Area'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - bearerAuth: []
      summary: get user areas results list by area id
      tags:
      - AreaResults
  /dropbox/auth:
    get:
      consumes:
      - application/json
      description: give url to authenticate with dropbox
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.AuthenticationURL'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: give url to authenticate with dropbox
      tags:
      - Dropbox
  /dropbox/auth/callback:
    post:
      consumes:
      - application/json
      description: give url to authenticate with dropbox
      parameters:
      - description: Callback Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/schemas.CodeCredentials'
      - description: Bearer token
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.JWT'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: give url to authenticate with dropbox
      tags:
      - Dropbox
  /dropbox/auth/callback/mobile:
    post:
      consumes:
      - application/json
      description: give url to authenticate with dropbox
      parameters:
      - description: Callback Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/schemas.CodeCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.JWT'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - bearerAuth: []
      summary: give url to authenticate with dropbox
      tags:
      - Dropbox
  /dropbox/file:
    get:
      consumes:
      - application/json
      description: give user info of dropbox
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - bearerAuth: []
      summary: give user info of dropbox
      tags:
      - Dropbox
  /dropbox/folder:
    get:
      consumes:
      - application/json
      description: give user info of dropbox
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - bearerAuth: []
      summary: give user info of dropbox
      tags:
      - Dropbox
  /dropbox/info:
    get:
      consumes:
      - application/json
      description: give user info of dropbox
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.UserCredentials'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - bearerAuth: []
      summary: give user info of dropbox
      tags:
      - Dropbox
  /github/auth:
    get:
      consumes:
      - application/json
      description: give url to authenticate with github
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.AuthenticationURL'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: give url to authenticate with github
      tags:
      - Github
  /github/auth/callback:
    post:
      consumes:
      - application/json
      description: give url to authenticate with github
      parameters:
      - description: Callback Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/schemas.CodeCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.JWT'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: give url to authenticate with github
      tags:
      - Github
  /github/auth/callback/mobile:
    post:
      consumes:
      - application/json
      description: give authentication token to mobile
      parameters:
      - description: Callback Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/schemas.CodeCredentials'
      - description: Bearer token
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.JWT'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: give authentication token to mobile
      tags:
      - Github
  /github/info:
    get:
      consumes:
      - application/json
      description: give user info of github
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.UserCredentials'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - bearerAuth: []
      summary: give user info of github
      tags:
      - Github
  /gmail/auth:
    get:
      consumes:
      - application/json
      description: give url to authenticate with gmail
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.AuthenticationURL'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: give url to authenticate with gmail
      tags:
      - Gmail
  /gmail/auth/callback:
    post:
      consumes:
      - application/json
      description: give url to authenticate with gmail
      parameters:
      - description: Callback Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/schemas.CodeCredentials'
      - description: Bearer token
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.JWT'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: give url to authenticate with gmail
      tags:
      - Gmail
  /gmail/auth/callback/mobile:
    post:
      consumes:
      - application/json
      description: give authentication token to mobile
      parameters:
      - description: Callback Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/schemas.CodeCredentials'
      - description: Bearer token
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.JWT'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: give authentication token to mobile
      tags:
      - Gmail
  /gmail/info:
    get:
      consumes:
      - application/json
      description: give user info of gmail
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.UserCredentials'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - bearerAuth: []
      summary: give user info of gmail
      tags:
      - Gmail
  /microsoft/auth:
    get:
      consumes:
      - application/json
      description: give url to authenticate with microsoft
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.AuthenticationURL'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: give url to authenticate with microsoft
      tags:
      - Microsoft
  /microsoft/auth/callback:
    post:
      consumes:
      - application/json
      description: give url to authenticate with microsoft
      parameters:
      - description: Callback Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/schemas.CodeCredentials'
      - description: Bearer token
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.JWT'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: give url to authenticate with microsoft
      tags:
      - Microsoft
  /microsoft/auth/callback/mobile:
    post:
      consumes:
      - application/json
      description: give url to authenticate with microsoft
      parameters:
      - description: Callback Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/schemas.CodeCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.JWT'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - bearerAuth: []
      summary: give url to authenticate with microsoft
      tags:
      - Microsoft
  /microsoft/info:
    get:
      consumes:
      - application/json
      description: give user info of microsoft
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.UserCredentials'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - bearerAuth: []
      summary: give user info of microsoft
      tags:
      - Microsoft
  /ping:
    get:
      consumes:
      - application/json
      description: do ping to check if the server is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Response'
      summary: ping example
      tags:
      - ping route
  /reaction/info/:id:
    get:
      consumes:
      - application/json
      description: get reaction info of service id
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.Reaction'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - bearerAuth: []
      summary: get reaction info
      tags:
      - Reaction
  /service/info:
    get:
      consumes:
      - application/json
      description: get service info of service id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.Service'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - bearerAuth: []
      summary: get service info
      tags:
      - Service
  /service/info/:id:
    get:
      consumes:
      - application/json
      description: get service info of service id
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Service'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - bearerAuth: []
      summary: get service info
      tags:
      - Service
  /spotify/auth:
    get:
      consumes:
      - application/json
      description: give url to authenticate with spotify
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.AuthenticationURL'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: give url to authenticate with spotify
      tags:
      - Spotify
  /spotify/auth/callback:
    post:
      consumes:
      - application/json
      description: give authentication token to web client
      parameters:
      - description: Callback Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/schemas.CodeCredentials'
      - description: Bearer token
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.JWT'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: give authentication token to web client
      tags:
      - Spotify
  /spotify/auth/callback/mobile:
    post:
      consumes:
      - application/json
      description: give authentication token to mobile
      parameters:
      - description: Callback Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/schemas.CodeCredentials'
      - description: Bearer token
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.JWT'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: give authentication token to mobile
      tags:
      - Spotify
  /spotify/info:
    get:
      consumes:
      - application/json
      description: give user info of spotify
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.UserCredentials'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - bearerAuth: []
      summary: give user info of spotify
      tags:
      - Spotify
  /token:
    delete:
      consumes:
      - application/json
      description: delete user token list
      parameters:
      - description: Token ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.Token'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - bearerAuth: []
      summary: delete user token
      tags:
      - Token
  /user/info:
    get:
      consumes:
      - application/json
      description: give user info of user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.UserCredentials'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - bearerAuth: []
      summary: give user info of user
      tags:
      - User
  /user/info/:
    delete:
      consumes:
      - application/json
      description: give user info of user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - bearerAuth: []
      summary: give user info of user
      tags:
      - User
    put:
      consumes:
      - application/json
      description: give user info of user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - bearerAuth: []
      summary: give user info of user
      tags:
      - User
  /user/info/all:
    get:
      consumes:
      - application/json
      description: give user info of user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.UserAllInfo'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      security:
      - bearerAuth: []
      summary: give user info of user
      tags:
      - User
  /user/login:
    post:
      description: Authenticates a user and provides a JWT to Authorize API calls
      parameters:
      - description: Username
        in: formData
        name: username
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.JWT'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Provides a JSON Web Token
      tags:
      - User
  /user/register:
    post:
      description: Authenticates a user and provides a JWT to Authorize API calls
      parameters:
      - description: Email
        in: formData
        name: email
        required: true
        type: string
      - description: Username
        in: formData
        name: username
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/schemas.JWT'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schemas.ErrorResponse'
      summary: Provides a JSON Web Token
      tags:
      - User
securityDefinitions:
  bearerAuth:
    description: Use "Bearer <token>" as the format for the Authorization header.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
