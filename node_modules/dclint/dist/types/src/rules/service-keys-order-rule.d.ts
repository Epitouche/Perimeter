import type { LintContext, LintMessage, LintMessageType, LintRule, LintRuleCategory, LintRuleSeverity, RuleMeta } from '../linter/linter.types';
interface ServiceKeysOrderRuleOptions {
    groupOrder?: GroupOrderEnum[];
    groups?: Partial<Record<GroupOrderEnum, string[]>>;
}
declare enum GroupOrderEnum {
    CoreDefinitions = "Core Definitions",
    ServiceDependencies = "Service Dependencies",
    DataManagementAndConfiguration = "Data Management and Configuration",
    EnvironmentConfiguration = "Environment Configuration",
    Networking = "Networking",
    RuntimeBehavior = "Runtime Behavior",
    OperationalMetadata = "Operational Metadata",
    SecurityAndExecutionContext = "Security and Execution Context",
    Other = "Other"
}
export default class ServiceKeysOrderRule implements LintRule {
    name: string;
    type: LintMessageType;
    category: LintRuleCategory;
    severity: LintRuleSeverity;
    message: string;
    meta: RuleMeta;
    fixable: boolean;
    getMessage({ serviceName, key, correctOrder, }: {
        serviceName: string;
        key: string;
        correctOrder: string[];
    }): string;
    private readonly groupOrder;
    private readonly groups;
    constructor(options?: ServiceKeysOrderRuleOptions);
    private getCorrectOrder;
    check(context: LintContext): LintMessage[];
    fix(content: string): string;
}
export {};
