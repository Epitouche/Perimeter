import type { LintContext, LintMessage, LintMessageType, LintRule, LintRuleCategory, LintRuleSeverity, RuleMeta } from '../linter/linter.types';
interface TopLevelPropertiesOrderRuleOptions {
    customOrder?: TopLevelKeys[];
}
export declare enum TopLevelKeys {
    XProperties = "x-properties",
    Version = "version",
    Name = "name",
    Include = "include",
    Services = "services",
    Networks = "networks",
    Volumes = "volumes",
    Secrets = "secrets",
    Configs = "configs"
}
export declare const DEFAULT_ORDER: TopLevelKeys[];
export default class TopLevelPropertiesOrderRule implements LintRule {
    name: string;
    type: LintMessageType;
    category: LintRuleCategory;
    severity: LintRuleSeverity;
    message: string;
    meta: RuleMeta;
    fixable: boolean;
    getMessage({ key, correctOrder }: {
        key: string;
        correctOrder: string[];
    }): string;
    private readonly expectedOrder;
    constructor(options?: TopLevelPropertiesOrderRuleOptions);
    check(context: LintContext): LintMessage[];
    fix(content: string): string;
}
export {};
